import argparse, socket
from datetime import datetime

MAX_BYTES = 65535
message = ' '


def server(port):
    global message
    # Create a socket object
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # Bind the socket to the host and port
    sock.bind(('127.0.0.1', port))

    print('Server is listening at', sock.getsockname())
    while True:
        try:
            # Receive data from the client
            data, address = sock.recvfrom(MAX_BYTES)
            message = data.decode('ascii')
            print('The client at {} says {!r}'.format(address, message))

            # Manipulate the text
            manipulated_text = double_vowels(message)
            print('Manipulated text: {}'.format(manipulated_text))

            # Send the manipulated text back to the client
            reply_data = manipulated_text.encode('ascii')
            sock.sendto(reply_data, address)
        except ConnectionResetError:
            print('Client has disconnected')
            break


def client(port):
    # Create a socket object
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # Send data to the server
    message = input('Enter message to send to server: ')
    text = '{}'.format(message)
    # Encode the text to bytes and send it to the server
    data = text.encode('ascii')
    sock.sendto(data, ('127.0.0.1', port))
    print('The OS assigned me the address {}'.format(sock.getsockname()))
    

def double_vowels(text):
    # Function to double the vowels in a given text
    result = ''
    for i in text:
        if i in 'aeiouAEIOU':
            result += i * 2
        else:
            result += i
    return result

if __name__ == '__main__':
  # Parse the command-line arguments
  parser = argparse.ArgumentParser(description='Send and receive UDP locally')
  # Add the role argument
  parser.add_argument('role', choices=['client', 'server'], help='which role to play')# Add the port argument
  parser.add_argument('-p', metavar='PORT', type=int, default=1060, help='UDP port (default 1060)') # Parse the arguments
  args = parser.parse_args() # Check the role and call the appropriate function
  
  
  if args.role == 'client':
      # Call the client function
      message = input('Enter message to send to server: ')
      
      client(args.p)
  else:
      # Call the server function
      server(args.p)
